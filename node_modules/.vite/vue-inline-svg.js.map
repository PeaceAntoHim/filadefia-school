{
  "version": 3,
  "sources": ["../vue-inline-svg/src/index.js", "dep:vue-inline-svg"],
  "sourcesContent": ["// peer dep is not installed during test\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { h as createElement } from 'vue';\r\n\r\n/** @type Object{string: Promise<Element>} */\r\nconst cache = {};\r\n\r\n/**\r\n * Remove false attrs\r\n * @param {Object} attrs\r\n */\r\nfunction filterAttrs(attrs) {\r\n    return Object.keys(attrs).reduce((result, key) => {\r\n        if (attrs[key] !== false && attrs[key] !== null && attrs[key] !== undefined) {\r\n            result[key] = attrs[key];\r\n        }\r\n        return result;\r\n    }, {});\r\n}\r\n\r\nconst InlineSvg = {\r\n    name: 'InlineSvg',\r\n    inheritAttrs: false,\r\n    render() {\r\n        if (!this.svgElSource) {\r\n            return null;\r\n        }\r\n        return createElement(\r\n            'svg',\r\n            Object.assign(\r\n                {},\r\n                // source attrs\r\n                this.getSvgAttrs(this.svgElSource),\r\n                // component attrs and listeners\r\n                filterAttrs(this.$attrs),\r\n                // content\r\n                { innerHTML: this.getSvgContent(this.svgElSource) },\r\n            ),\r\n        );\r\n    },\r\n    props: {\r\n        src: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        title: {\r\n            type: String,\r\n        },\r\n        transformSource: {\r\n            type: Function,\r\n            default: (svg) => svg,\r\n        },\r\n        keepDuringLoading: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n    },\r\n    emits: ['loaded', 'unloaded', 'error'],\r\n    data() {\r\n        return {\r\n            /** @type SVGElement */\r\n            svgElSource: null,\r\n        };\r\n    },\r\n    watch: {\r\n        src(newValue) {\r\n            // re-generate cached svg (`svgElSource`)\r\n            this.getSource(newValue);\r\n        },\r\n    },\r\n    mounted() {\r\n        // generate `svgElSource`\r\n        this.getSource(this.src);\r\n    },\r\n    methods: {\r\n        getSvgAttrs(svgEl) {\r\n            // copy attrs\r\n            let svgAttrs = {};\r\n            const attrs = svgEl.attributes;\r\n            if (!attrs) {\r\n                return svgAttrs;\r\n            }\r\n            for (let i = attrs.length - 1; i >= 0; i--) {\r\n                svgAttrs[attrs[i].name] = attrs[i].value;\r\n            }\r\n            return svgAttrs;\r\n        },\r\n        getSvgContent(svgEl) {\r\n            svgEl = svgEl.cloneNode(true);\r\n            svgEl = this.transformSource(svgEl);\r\n            if (this.title) {\r\n                setTitle(svgEl, this.title);\r\n            }\r\n\r\n            // copy inner html\r\n            return svgEl.innerHTML;\r\n        },\r\n        /**\r\n         * Get svgElSource\r\n         * @param {string} src\r\n         */\r\n        getSource(src) {\r\n            // fill cache by src with promise\r\n            if (!cache[src]) {\r\n                // download\r\n                cache[src] = this.download(src);\r\n            }\r\n            // notify svg is unloaded\r\n            if (this.svgElSource && cache[src].isPending() && !this.keepDuringLoading) {\r\n                this.svgElSource = null;\r\n                this.$emit('unloaded');\r\n            }\r\n\r\n            // inline svg when cached promise resolves\r\n            cache[src]\r\n                .then((svg) => {\r\n                    this.svgElSource = svg;\r\n                    // wait to render\r\n                    this.$nextTick(() => {\r\n                        // notify\r\n                        this.$emit('loaded', this.$el);\r\n                    });\r\n                })\r\n                .catch((err) => {\r\n                    // notify svg is unloaded\r\n                    if (this.svgElSource) {\r\n                        this.svgElSource = null;\r\n                        this.$emit('unloaded');\r\n                    }\r\n                    // remove cached rejected promise so next image can try load again\r\n                    delete cache[src];\r\n                    this.$emit('error', err);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Get the contents of the SVG\r\n         * @param {string} url\r\n         * @returns {Promise<Element>}\r\n         */\r\n        download(url) {\r\n            return makePromiseState(new Promise((resolve, reject) => {\r\n                const request = new XMLHttpRequest();\r\n                request.open('GET', url, true);\r\n\r\n                request.onload = () => {\r\n                    if (request.status >= 200 && request.status < 400) {\r\n                        try {\r\n                            // Setup a parser to convert the response to text/xml in order for it to be manipulated and changed\r\n                            const parser = new DOMParser();\r\n                            const result = parser.parseFromString(request.responseText, 'text/xml');\r\n                            let svgEl = result.getElementsByTagName('svg')[0];\r\n                            if (svgEl) {\r\n                                // svgEl = this.transformSource(svgEl);\r\n                                resolve(svgEl);\r\n                            } else {\r\n                                reject(new Error('Loaded file is not valid SVG\"'));\r\n                            }\r\n                        } catch (e) {\r\n                            reject(e);\r\n                        }\r\n                    } else {\r\n                        reject(new Error('Error loading SVG'));\r\n                    }\r\n                };\r\n\r\n                request.onerror = reject;\r\n                request.send();\r\n            }));\r\n        },\r\n    },\r\n};\r\n\r\n/**\r\n * Create or edit the <title> element of a SVG\r\n * @param {SVGElement} svg\r\n * @param {string} title\r\n */\r\nfunction setTitle(svg, title) {\r\n    const titleTags = svg.getElementsByTagName('title');\r\n    if (titleTags.length) { // overwrite existing title\r\n        titleTags[0].textContent = title;\r\n    } else { // create a title element if one doesn't already exist\r\n        const titleEl = document.createElementNS('http://www.w3.org/2000/svg', 'title');\r\n        titleEl.textContent = title;\r\n        svg.appendChild(titleEl);\r\n    }\r\n}\r\n\r\n/**\r\n * @typedef {Promise} PromiseWithState\r\n * @property {Function<boolean>} isPending\r\n */\r\n\r\n/**\r\n * This function allow you to modify a JS Promise by adding some status properties.\r\n * @param {Promise|PromiseWithState} promise\r\n * @return {PromiseWithState}\r\n */\r\nfunction makePromiseState(promise) {\r\n    // Don't modify any promise that has been already modified.\r\n    if (promise.isPending) return promise;\r\n\r\n    // Set initial state\r\n    let isPending = true;\r\n\r\n    // Observe the promise, saving the fulfillment in a closure scope.\r\n    let result = promise.then(\r\n        (v) => {\r\n            isPending = false;\r\n            return v;\r\n        },\r\n        (e) => {\r\n            isPending = false;\r\n            throw e;\r\n        },\r\n    );\r\n\r\n    result.isPending = function getIsPending() { return isPending; };\r\n    return result;\r\n}\r\n\r\nexport default InlineSvg;\r\n", "import d from \"./node_modules/vue-inline-svg/src/index.js\";export default d;"],
  "mappings": "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",
  "names": []
}
